generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model EventSchedule {
  id              Int             @id @default(autoincrement())
  dayNumber       Int
  version         Int
  isRainySchedule Boolean
  scheduleDate    DateTime
  createdAt       DateTime        @default(now())
  updatedAt       DateTime?       @updatedAt
  scheduleImages  ScheduleImage[]
}

model ScheduleImage {
  id              Int           @id @default(autoincrement())
  dayNumber       Int
  description     String
  startTime       DateTime
  endTime         DateTime
  fileName        String // スケジュールのファイル名を格納するフィールド
  eventScheduleId Int
  eventSchedule   EventSchedule @relation(fields: [eventScheduleId], references: [id])
}

model Team {
  id     Int     @id @default(autoincrement())
  name   String
  color  String? // #000000形式
  scores Score[]
}

model Event {
  id          Int     @id @default(autoincrement())
  name        String
  description String?

  teamData Json[] // [予選, 本選]のように分けて保持する。予選は予選の順位、本選は本選の順位を保持する。
  // ブロックの情報もここから参照できる。
  // 形式や種目に応じて柔軟に保持。
  // 例 予選はリーグ, 本選はトーナメントの場合
  // [
  //   {
  //     "type": "league",
  //     "blocks": {
  //       "A": [
  //         { "teamId": 1 },
  //         { "teamId": 2 }
  //        ],
  //       "B": [
  //         { "teamId": 3 },
  //         { "teamId": 4 }
  //        ]
  //     }
  //   },
  //  {
  //     "type": "tournament",
  //     "teams": [
  //       {"teamId": 1 },
  //       {"teamId": 3 },
  //       {"teamId": 2 },
  //   ]
  // ]
  // 最終的な順位はこの配列の-1番目のオブジェクトの値を参照すればよい。
  // 予選本選の区別がない場合は1つのオブジェクトを持つ配列を保持する。
  // 例　トーナメントのみ
  // [
  //   {
  //     "type": "tournament",
  //     "teams": [
  //       {"teamId": 1 },
  //       {"teamId": 3 },
  //       {"teamId": 2 },
  //     ]
  //   }
  // ]

  // ここにteamIdの他に勝利数等を記録しても良い

  matches MatchPlan[]
  scores  Score[]
}

model MatchPlan {
  id      Int @id @default(autoincrement())
  eventId Int

  matchName       String? // 試合の名前
  matchNote       String? // 試合の備考
  matchSecretNote String? // 内部伝達用の試合の備考 (多分使わない)

  teamIds   String[] // チームIDの配列。もし依存にするなら$<T(ournament)-[matchId]-[W|L] | L(eague)-[eventId]-[teamDataでのindex(0なら予選, 1なら本選)]-[blockName]-[rank]> のように指定する。Wは勝利チーム、Lは敗北チームを意味する。 例: $T-1-W, $T-20-L, $L-1-0-A-1, $L-3-0-B-2
  // 1vs1じゃないところで敗北チームは指定しないでほしい(願望)
  teamNotes String[] // チームの備考. インデックスで判断するので空文字で埋めても良い。

  // teamIdがnullでない場合はteamIdを表示する。
  // teamIdがnullの場合はteamNotesを表示する。

  scheduledStartTime DateTime
  scheduledEndTime   DateTime
  locationId         Int?
  updatedAt          DateTime?    @updatedAt
  event              Event        @relation(fields: [eventId], references: [id])
  location           Location?    @relation(fields: [locationId], references: [id])
  matchResult        MatchResult?
}

model MatchResult {
  matchId          Int     @id @unique
  resultNote       String? // 試合結果の備考。公開する。例えば引き分けになったのでじゃんけんで決定した等
  resultSecretNote String? // 内部伝達用の試合結果の備考 (多分使わない)

  teamIds     Int[] // チームIDの配列。実際に対戦したチームを入力。
  matchScores String[] // チームのスコア. インデックスで判断するので空文字で埋めても良い。

  winnerTeamId Int // ただ一つ 
  loserTeamId  Int? // 1vs1じゃないところで敗北チームは指定しないでほしい(願望)

  startedAt  DateTime?
  endedAt    DateTime?
  isCanceled Boolean   @default(false)
  cancelNote String? // 試合がキャンセルされた理由

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  matchPlan MatchPlan @relation(fields: [matchId], references: [id])
}

model Score {
  id      Int    @id @default(autoincrement())
  eventId Int
  teamId  Int
  score   Int
  note    String @default("")

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  event Event @relation(fields: [eventId], references: [id])
  team  Team  @relation(fields: [teamId], references: [id])
}

model Location {
  id          Int         @id @default(autoincrement())
  name        String
  description String?
  coordinates Json
  createdAt   DateTime    @default(now())
  updatedAt   DateTime?   @updatedAt
  matches     MatchPlan[]
}
